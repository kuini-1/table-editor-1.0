import { z } from "zod";

// Define the schema for the merchant table
export const merchantSchema = z.object({
  table_id: z.string().uuid(),
  created_at: z.string().optional(),
  updated_at: z.string().optional(),
  tblidx: z.coerce.number().min(0, 'Must be a positive number').max(9999999999, 'Cannot exceed 10 digits').optional(),
  wsznametext: z.string().optional(),
  bysell_type: z.coerce.number().min(0, 'Must be a positive number').optional(),
  tab_name: z.string().optional(),
  dwneedmileage: z.coerce.number().min(0, 'Must be a positive number').optional(),
  aitem_tblidx_0: z.coerce.number().min(0, 'Must be a positive number').optional(),
  aneeditemtblidx_0: z.coerce.number().min(0, 'Must be a positive number').optional(),
  abyneeditemstack_0: z.coerce.number().min(0, 'Must be a positive number').optional(),
  adwneedzenny_0: z.coerce.number().min(0, 'Must be a positive number').optional(),
  aitem_tblidx_1: z.coerce.number().min(0, 'Must be a positive number').optional(),
  aneeditemtblidx_1: z.coerce.number().min(0, 'Must be a positive number').optional(),
  abyneeditemstack_1: z.coerce.number().min(0, 'Must be a positive number').optional(),
  adwneedzenny_1: z.coerce.number().min(0, 'Must be a positive number').optional(),
  aitem_tblidx_2: z.coerce.number().min(0, 'Must be a positive number').optional(),
  aneeditemtblidx_2: z.coerce.number().min(0, 'Must be a positive number').optional(),
  abyneeditemstack_2: z.coerce.number().min(0, 'Must be a positive number').optional(),
  adwneedzenny_2: z.coerce.number().min(0, 'Must be a positive number').optional(),
  aitem_tblidx_3: z.coerce.number().min(0, 'Must be a positive number').optional(),
  aneeditemtblidx_3: z.coerce.number().min(0, 'Must be a positive number').optional(),
  abyneeditemstack_3: z.coerce.number().min(0, 'Must be a positive number').optional(),
  adwneedzenny_3: z.coerce.number().min(0, 'Must be a positive number').optional(),
  aitem_tblidx_4: z.coerce.number().min(0, 'Must be a positive number').optional(),
  aneeditemtblidx_4: z.coerce.number().min(0, 'Must be a positive number').optional(),
  abyneeditemstack_4: z.coerce.number().min(0, 'Must be a positive number').optional(),
  adwneedzenny_4: z.coerce.number().min(0, 'Must be a positive number').optional(),
  aitem_tblidx_5: z.coerce.number().min(0, 'Must be a positive number').optional(),
  aneeditemtblidx_5: z.coerce.number().min(0, 'Must be a positive number').optional(),
  abyneeditemstack_5: z.coerce.number().min(0, 'Must be a positive number').optional(),
  adwneedzenny_5: z.coerce.number().min(0, 'Must be a positive number').optional(),
  aitem_tblidx_6: z.coerce.number().min(0, 'Must be a positive number').optional(),
  aneeditemtblidx_6: z.coerce.number().min(0, 'Must be a positive number').optional(),
  abyneeditemstack_6: z.coerce.number().min(0, 'Must be a positive number').optional(),
  adwneedzenny_6: z.coerce.number().min(0, 'Must be a positive number').optional(),
  aitem_tblidx_7: z.coerce.number().min(0, 'Must be a positive number').optional(),
  aneeditemtblidx_7: z.coerce.number().min(0, 'Must be a positive number').optional(),
  abyneeditemstack_7: z.coerce.number().min(0, 'Must be a positive number').optional(),
  adwneedzenny_7: z.coerce.number().min(0, 'Must be a positive number').optional(),
  aitem_tblidx_8: z.coerce.number().min(0, 'Must be a positive number').optional(),
  aneeditemtblidx_8: z.coerce.number().min(0, 'Must be a positive number').optional(),
  abyneeditemstack_8: z.coerce.number().min(0, 'Must be a positive number').optional(),
  adwneedzenny_8: z.coerce.number().min(0, 'Must be a positive number').optional(),
  aitem_tblidx_9: z.coerce.number().min(0, 'Must be a positive number').optional(),
  aneeditemtblidx_9: z.coerce.number().min(0, 'Must be a positive number').optional(),
  abyneeditemstack_9: z.coerce.number().min(0, 'Must be a positive number').optional(),
  adwneedzenny_9: z.coerce.number().min(0, 'Must be a positive number').optional(),
}); 