import * as z from 'zod';

// Helper function to create skill fields schema
const createSkillFields = (index: number) => ({
  [`wuse_skill_time_${index}`]: z.number().nullable(),
  [`use_skill_tblidx_${index}`]: z.number().nullable(),
  [`byuse_skill_basis_${index}`]: z.number().nullable(),
  [`wuse_skill_lp_${index}`]: z.number().nullable(),
});

// Create an array of indices from 0 to 6 for skills
const skillIndices = Array.from({ length: 7 }, (_, i) => i);

// Generate all skill fields
const skillFields = skillIndices.reduce((acc, index) => ({
  ...acc,
  ...createSkillFields(index),
}), {});

// Main schema definition
export const npcSchema = z.object({
  id: z.string().optional(),
  table_id: z.string().nullable(),
  created_at: z.string().nullable(),
  updated_at: z.string().nullable(),
  tblidx: z.number().nullable(),
  bvalidity_able: z.boolean().nullable(),
  name: z.number().nullable(),
  wsznametext: z.string().nullable(),
  szmodel: z.string().nullable(),
  bylevel: z.number().nullable(),
  bygrade: z.number().nullable(),
  dwai_bit_flag: z.number().nullable(),
  wlp_regeneration: z.number().nullable(),
  wep_regeneration: z.number().nullable(),
  byattack_animation_quantity: z.number().nullable(),
  bybattle_attribute: z.number().nullable(),
  wbasic_physical_offence: z.number().nullable(),
  wbasic_energy_offence: z.number().nullable(),
  fwalk_speed_origin: z.number().nullable(),
  fwalk_speed: z.number().nullable(),
  frun_speed_origin: z.number().nullable(),
  frun_speed: z.number().nullable(),
  fradius_x: z.number().nullable(),
  fradius_z: z.number().nullable(),
  wsight_range: z.number().nullable(),
  wscan_range: z.number().nullable(),
  byvisible_sight_range: z.number().nullable(),
  szcamera_bone_name: z.string().nullable(),
  wattackcooltime: z.number().nullable(),
  ffly_height: z.number().nullable(),
  sznametext: z.string().nullable(),
  bspawn_animation: z.boolean().nullable(),
  dwdialoggroup: z.number().nullable(),
  szillust: z.string().nullable(),
  dwallianceidx: z.number().nullable(),
  waggromaxcount: z.number().nullable(),
  dwnpcattributeflag: z.number().nullable(),
  wstomachachedefence: z.number().nullable(),
  wpoisondefence: z.number().nullable(),
  wbleeddefence: z.number().nullable(),
  wburndefence: z.number().nullable(),
  dwbasic_lp: z.number().nullable(),
  wbasic_ep: z.number().nullable(),
  wbasic_physical_defence: z.number().nullable(),
  wbasic_energy_defence: z.number().nullable(),
  wbasicstr: z.number().nullable(),
  wbasiccon: z.number().nullable(),
  wbasicfoc: z.number().nullable(),
  wbasicdex: z.number().nullable(),
  wbasicsol: z.number().nullable(),
  wbasiceng: z.number().nullable(),
  fscale: z.number().nullable(),
  wattack_speed_rate: z.number().nullable(),
  byattack_type: z.number().nullable(),
  fattack_range: z.number().nullable(),
  wattack_rate: z.number().nullable(),
  wdodge_rate: z.number().nullable(),
  wblock_rate: z.number().nullable(),
  wcurse_success_rate: z.number().nullable(),
  wcurse_tolerance_rate: z.number().nullable(),
  fradius: z.number().nullable(),
  wbasic_aggro_point: z.number().nullable(),
  bynpctype: z.number().nullable(),
  byjob: z.number().nullable(),
  dwfunc_bit_flag: z.number().nullable(),
  dialog_script_index: z.number().nullable(),
  statustransformtblidx: z.number().nullable(),
  contentstblidx: z.number().nullable(),
  wunknown: z.number().nullable(),
  dwunknown2: z.number().nullable(),
  dwunknown3: z.number().nullable(),
  ...skillFields,
  amerchant_tblidx_0: z.number().nullable(),
  amerchant_tblidx_1: z.number().nullable(),
  amerchant_tblidx_2: z.number().nullable(),
  amerchant_tblidx_3: z.number().nullable(),
  amerchant_tblidx_4: z.number().nullable(),
  amerchant_tblidx_5: z.number().nullable(),
});

// Column definitions for the table
export const columns = [
  { key: 'tblidx', label: 'TBLIDX', type: 'number' as const, validation: npcSchema.shape.tblidx },
  { key: 'bvalidity_able', label: 'Valid', type: 'boolean' as const, validation: npcSchema.shape.bvalidity_able },
  { key: 'name', label: 'Name ID', type: 'number' as const, validation: npcSchema.shape.name },
  { key: 'wsznametext', label: 'Name', type: 'text' as const, validation: npcSchema.shape.wsznametext },
  { key: 'szmodel', label: 'Model', type: 'text' as const, validation: npcSchema.shape.szmodel },
  { key: 'bylevel', label: 'Level', type: 'number' as const, validation: npcSchema.shape.bylevel },
  { key: 'bygrade', label: 'Grade', type: 'number' as const, validation: npcSchema.shape.bygrade },
  { key: 'dwai_bit_flag', label: 'AI Bit Flag', type: 'number' as const, validation: npcSchema.shape.dwai_bit_flag },
  { key: 'wlp_regeneration', label: 'LP Regen', type: 'number' as const, validation: npcSchema.shape.wlp_regeneration },
  { key: 'wep_regeneration', label: 'EP Regen', type: 'number' as const, validation: npcSchema.shape.wep_regeneration },
  { key: 'byattack_animation_quantity', label: 'Attack Animation Quantity', type: 'number' as const, validation: npcSchema.shape.byattack_animation_quantity },
  { key: 'bybattle_attribute', label: 'Battle Attribute', type: 'number' as const, validation: npcSchema.shape.bybattle_attribute },
  { key: 'wbasic_physical_offence', label: 'Physical Attack', type: 'number' as const, validation: npcSchema.shape.wbasic_physical_offence },
  { key: 'wbasic_energy_offence', label: 'Energy Attack', type: 'number' as const, validation: npcSchema.shape.wbasic_energy_offence },
  { key: 'fwalk_speed_origin', label: 'Base Walk Speed', type: 'number' as const, validation: npcSchema.shape.fwalk_speed_origin },
  { key: 'fwalk_speed', label: 'Walk Speed', type: 'number' as const, validation: npcSchema.shape.fwalk_speed },
  { key: 'frun_speed_origin', label: 'Base Run Speed', type: 'number' as const, validation: npcSchema.shape.frun_speed_origin },
  { key: 'frun_speed', label: 'Run Speed', type: 'number' as const, validation: npcSchema.shape.frun_speed },
  { key: 'fradius_x', label: 'Radius X', type: 'number' as const, validation: npcSchema.shape.fradius_x },
  { key: 'fradius_z', label: 'Radius Z', type: 'number' as const, validation: npcSchema.shape.fradius_z },
  { key: 'wsight_range', label: 'Sight Range', type: 'number' as const, validation: npcSchema.shape.wsight_range },
  { key: 'wscan_range', label: 'Scan Range', type: 'number' as const, validation: npcSchema.shape.wscan_range },
  { key: 'byvisible_sight_range', label: 'Visible Sight Range', type: 'number' as const, validation: npcSchema.shape.byvisible_sight_range },
  { key: 'szcamera_bone_name', label: 'Camera Bone', type: 'text' as const, validation: npcSchema.shape.szcamera_bone_name },
  { key: 'wattackcooltime', label: 'Attack Cooldown', type: 'number' as const, validation: npcSchema.shape.wattackcooltime },
  { key: 'ffly_height', label: 'Fly Height', type: 'number' as const, validation: npcSchema.shape.ffly_height },
  { key: 'sznametext', label: 'Display Name', type: 'text' as const, validation: npcSchema.shape.sznametext },
  { key: 'bspawn_animation', label: 'Spawn Animation', type: 'boolean' as const, validation: npcSchema.shape.bspawn_animation },
  { key: 'dwdialoggroup', label: 'Dialog Group', type: 'number' as const, validation: npcSchema.shape.dwdialoggroup },
  { key: 'szillust', label: 'Illustration', type: 'text' as const, validation: npcSchema.shape.szillust },
  { key: 'dwallianceidx', label: 'Alliance Index', type: 'number' as const, validation: npcSchema.shape.dwallianceidx },
  { key: 'waggromaxcount', label: 'Max Aggro Count', type: 'number' as const, validation: npcSchema.shape.waggromaxcount },
  { key: 'dwnpcattributeflag', label: 'NPC Attribute Flag', type: 'number' as const, validation: npcSchema.shape.dwnpcattributeflag },
  { key: 'wstomachachedefence', label: 'Stomachache Defense', type: 'number' as const, validation: npcSchema.shape.wstomachachedefence },
  { key: 'wpoisondefence', label: 'Poison Defense', type: 'number' as const, validation: npcSchema.shape.wpoisondefence },
  { key: 'wbleeddefence', label: 'Bleed Defense', type: 'number' as const, validation: npcSchema.shape.wbleeddefence },
  { key: 'wburndefence', label: 'Burn Defense', type: 'number' as const, validation: npcSchema.shape.wburndefence },
  { key: 'dwbasic_lp', label: 'Base LP', type: 'number' as const, validation: npcSchema.shape.dwbasic_lp },
  { key: 'wbasic_ep', label: 'Base EP', type: 'number' as const, validation: npcSchema.shape.wbasic_ep },
  { key: 'wbasic_physical_defence', label: 'Physical Defense', type: 'number' as const, validation: npcSchema.shape.wbasic_physical_defence },
  { key: 'wbasic_energy_defence', label: 'Energy Defense', type: 'number' as const, validation: npcSchema.shape.wbasic_energy_defence },
  { key: 'wbasicstr', label: 'STR', type: 'number' as const, validation: npcSchema.shape.wbasicstr },
  { key: 'wbasiccon', label: 'CON', type: 'number' as const, validation: npcSchema.shape.wbasiccon },
  { key: 'wbasicfoc', label: 'FOC', type: 'number' as const, validation: npcSchema.shape.wbasicfoc },
  { key: 'wbasicdex', label: 'DEX', type: 'number' as const, validation: npcSchema.shape.wbasicdex },
  { key: 'wbasicsol', label: 'SOL', type: 'number' as const, validation: npcSchema.shape.wbasicsol },
  { key: 'wbasiceng', label: 'ENG', type: 'number' as const, validation: npcSchema.shape.wbasiceng },
  { key: 'fscale', label: 'Scale', type: 'number' as const, validation: npcSchema.shape.fscale },
  { key: 'wattack_speed_rate', label: 'Attack Speed Rate', type: 'number' as const, validation: npcSchema.shape.wattack_speed_rate },
  { key: 'byattack_type', label: 'Attack Type', type: 'number' as const, validation: npcSchema.shape.byattack_type },
  { key: 'fattack_range', label: 'Attack Range', type: 'number' as const, validation: npcSchema.shape.fattack_range },
  { key: 'wattack_rate', label: 'Attack Rate', type: 'number' as const, validation: npcSchema.shape.wattack_rate },
  { key: 'wdodge_rate', label: 'Dodge Rate', type: 'number' as const, validation: npcSchema.shape.wdodge_rate },
  { key: 'wblock_rate', label: 'Block Rate', type: 'number' as const, validation: npcSchema.shape.wblock_rate },
  { key: 'wcurse_success_rate', label: 'Curse Success Rate', type: 'number' as const, validation: npcSchema.shape.wcurse_success_rate },
  { key: 'wcurse_tolerance_rate', label: 'Curse Tolerance Rate', type: 'number' as const, validation: npcSchema.shape.wcurse_tolerance_rate },
  { key: 'fradius', label: 'Radius', type: 'number' as const, validation: npcSchema.shape.fradius },
  { key: 'wbasic_aggro_point', label: 'Base Aggro Point', type: 'number' as const, validation: npcSchema.shape.wbasic_aggro_point },
  { key: 'bynpctype', label: 'NPC Type', type: 'number' as const, validation: npcSchema.shape.bynpctype },
  { key: 'byjob', label: 'Job', type: 'number' as const, validation: npcSchema.shape.byjob },
  { key: 'dwfunc_bit_flag', label: 'Function Bit Flag', type: 'number' as const, validation: npcSchema.shape.dwfunc_bit_flag },
  { key: 'dialog_script_index', label: 'Dialog Script Index', type: 'number' as const, validation: npcSchema.shape.dialog_script_index },
  { key: 'statustransformtblidx', label: 'Status Transform Index', type: 'number' as const, validation: npcSchema.shape.statustransformtblidx },
  { key: 'contentstblidx', label: 'Contents Index', type: 'number' as const, validation: npcSchema.shape.contentstblidx },
  ...skillIndices.flatMap(index => [
    { key: `wuse_skill_time_${index}`, label: `Skill ${index} Time`, type: 'number' as const, validation: npcSchema.shape[`wuse_skill_time_${index}` as keyof typeof npcSchema.shape] },
    { key: `use_skill_tblidx_${index}`, label: `Skill ${index} Index`, type: 'number' as const, validation: npcSchema.shape[`use_skill_tblidx_${index}` as keyof typeof npcSchema.shape] },
    { key: `byuse_skill_basis_${index}`, label: `Skill ${index} Basis`, type: 'number' as const, validation: npcSchema.shape[`byuse_skill_basis_${index}` as keyof typeof npcSchema.shape] },
    { key: `wuse_skill_lp_${index}`, label: `Skill ${index} LP`, type: 'number' as const, validation: npcSchema.shape[`wuse_skill_lp_${index}` as keyof typeof npcSchema.shape] }
  ]),
  { key: 'amerchant_tblidx_0', label: 'Merchant Index 0', type: 'number' as const, validation: npcSchema.shape.amerchant_tblidx_0 },
  { key: 'amerchant_tblidx_1', label: 'Merchant Index 1', type: 'number' as const, validation: npcSchema.shape.amerchant_tblidx_1 },
  { key: 'amerchant_tblidx_2', label: 'Merchant Index 2', type: 'number' as const, validation: npcSchema.shape.amerchant_tblidx_2 },
  { key: 'amerchant_tblidx_3', label: 'Merchant Index 3', type: 'number' as const, validation: npcSchema.shape.amerchant_tblidx_3 },
  { key: 'amerchant_tblidx_4', label: 'Merchant Index 4', type: 'number' as const, validation: npcSchema.shape.amerchant_tblidx_4 },
  { key: 'amerchant_tblidx_5', label: 'Merchant Index 5', type: 'number' as const, validation: npcSchema.shape.amerchant_tblidx_5 }
];

export type NpcFormData = z.infer<typeof npcSchema>; 