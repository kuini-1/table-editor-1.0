import { z } from "zod";

// Define the schema for the skill table
export const skillSchema = z.object({
  id: z.string().uuid().optional(),
  table_id: z.string().uuid().optional(),
  created_at: z.string().optional(),
  updated_at: z.string().optional(),
  tblidx: z.number().optional(),
  skill_name: z.string().optional(),
  wsznametext: z.string().optional(),
  bvalidity_able: z.number().optional(),
  dwpc_class_bit_flag: z.number().optional(),
  byclass_type: z.number().optional(),
  byskill_class: z.number().optional(),
  byskill_type: z.number().optional(),
  byskill_active_type: z.number().optional(),
  bybuff_group: z.number().optional(),
  byslot_index: z.number().optional(),
  byskill_grade: z.number().optional(),
  dwfunction_bit_flag: z.number().optional(),
  byappoint_target: z.number().optional(),
  byapply_target: z.number().optional(),
  byapply_target_max: z.number().optional(),
  byapply_range: z.number().optional(),
  byapply_area_size_1: z.number().optional(),
  byapply_area_size_2: z.number().optional(),
  dwadditional_aggro_point: z.number().optional(),
  byrequire_train_level: z.number().optional(),
  dwrequire_zenny: z.number().optional(),
  wnext_skill_train_exp: z.number().optional(),
  wrequiresp: z.number().optional(),
  bselftrain: z.number().optional(),
  uirequire_skill_tblidx_min_1: z.number().optional(),
  uirequire_skill_tblidx_max_1: z.number().optional(),
  uirequire_skill_tblidx_min_2: z.number().optional(),
  uirequire_skill_tblidx_max_2: z.number().optional(),
  root_skill: z.number().optional(),
  byrequire_epuip_slot_type: z.number().optional(),
  byrequire_item_type: z.number().optional(),
  szicon_name: z.string().optional(),
  dwrequire_lp: z.number().optional(),
  wrequire_ep: z.number().optional(),
  byrequire_rp_ball: z.number().optional(),
  fcasting_time: z.number().optional(),
  dwcastingtimeinmillisecs: z.number().optional(),
  wcool_time: z.number().optional(),
  dwcooltimeinmillisecs: z.number().optional(),
  wkeep_time: z.number().optional(),
  dwkeeptimeinmillisecs: z.number().optional(),
  bkeep_effect: z.number().optional(),
  byuse_range_min: z.number().optional(),
  fuse_range_min: z.number().optional(),
  byuse_range_max: z.number().optional(),
  fuse_range_max: z.number().optional(),
  note: z.string().optional(),
  dwnextskilltblidx: z.number().optional(),
  bdefaultdisplayoff: z.number().optional(),
  dwanimation_time: z.number().optional(),
  wcasting_animation_start: z.number().optional(),
  wcasting_animation_loop: z.number().optional(),
  waction_animation_index: z.number().optional(),
  waction_loop_animation_index: z.number().optional(),
  waction_end_animation_index: z.number().optional(),
  bdash_able: z.number().optional(),
  dwtransform_use_info_bit_flag: z.number().optional(),
  fsuccess_rate: z.number().optional(),
  bypc_class_change: z.number().optional(),
  byuse_type: z.number().optional(),
  byskill_group: z.number().optional(),
  dwrequire_vp: z.number().optional(),
  dwuse_restriction_rule_bit_flag: z.number().optional(),
  skill_effect_0: z.number().optional(),
  byskill_effect_type_0: z.number().optional(),
  askill_effect_value_0: z.number().optional(),
  skill_effect_1: z.number().optional(),
  byskill_effect_type_1: z.number().optional(),
  askill_effect_value_1: z.number().optional(),
  abyrpeffect_0: z.number().optional(),
  afrpeffectvalue_0: z.number().optional(),
  abyrpeffect_1: z.number().optional(),
  afrpeffectvalue_1: z.number().optional(),
  abyrpeffect_2: z.number().optional(),
  afrpeffectvalue_2: z.number().optional(),
  abyrpeffect_3: z.number().optional(),
  afrpeffectvalue_3: z.number().optional(),
  abyrpeffect_4: z.number().optional(),
  afrpeffectvalue_4: z.number().optional(),
  abyrpeffect_5: z.number().optional(),
  afrpeffectvalue_5: z.number().optional(),
}); 